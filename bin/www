#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webguru-assignment:server');
var http = require('http');
const models = require('../models')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3005');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function(){
  console.log(`Server is running on  >> http:localhost:${port}`)
});
server.on('error', onError);
server.on('listening', onListening);

const io = require('socket.io')(server);

let users = [];

//Whenever someone connects this gets executed
io.on('connection', onConnected);

function onConnected(socket){
  console.log("socket id", socket.id)
  // socketsConnected.add(socket.id)

  // io.emit('client-total', socketsConnected.size)

  socket.on('user_connected', (userId) => {
    users[userId] = socket.id
    io.emit('user_connected', userId)
  })

  socket.on('disconnect', () => {
    console.log("socket disconnected",socket.id);
    // socketsConnected.delete(socket.id)
    // io.emit('client-total', socketsConnected.size)
  })

  socket.on('send_message', async (data) => {
    console.log('data >>', data)

    var socketId = users[data.receiver];
    if(socketId){
      io.to(socketId).emit("chat-message", data)
    }

    await models.Messages.create({
      receiver_id: data.receiver,
      sender_id: data.sender,
      message: data.message
    })
  })
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
